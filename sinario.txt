사회자 : 팀장님께서 팀원들에게 web ppt를 이용해서 html5 관련 주제로 팀 세미나를 하라고 하셨다.
단, tizen ide를 이용해서 dog fooding을 할 것.
이에 따라 경석이는 tizen ide에서 canvas 발표 준비를 하고 있는 중이다.

석 : (투덜투덜) 아 왜 팀장님은 기능도 좋지 않은 tizen ide를 이용해서 세미나를 준비하라고 하시는거야,,, 
     아 짜증나,,, 나무에 가지하나 그리고 확인하는게 왤케 힘들어,,,
     (약 2,3분간 소스를 수정하고, html view로 변경사항 확인하고, 에러확인하고, 
      소스를 수정하고, html view로 변경사항 확인하고, 에러확인하고,
      수정하고를 계속 반복하면서 짜증이 난다.)
     아 왤케 손이 많이 가는거야. 아 짜증나, 그냥 오늘은 안할란다.

탱 : yeoman~ what's up bro~?

석 : ide이용해서 팀 세미나 준비 중인데 짜증나서 안할라구. 수정하고 확인하기 너무 힘들어.

탱 : 어떻게 만들고 있는데?

석 : ide에서 소스 수정하고, html view로 수정사항 확인하려니깐 계속 첫페이지로 가더라구.
     그래서 크롬에서 새로고침해서 수정사항 확인하고, 
     에러나면 크롬에 인스펙터 이용해서 에러 확인하고,,, 
     컴터 화면도 작은데 인스펙터까지 띄우니깐 너무 힘드네.

===================
live reload
===================

탱 : 에이, 잠깐 보자.(yeoman server 실행한다) 지금 뭐 만들고 있었는데?

석 : 나무에 나뭇가지 그리고 있었어.

탱 : 한번 해봐.

석 : (소스 수정하고 저장한다. 수정사항이 web에 바로 적용된다.)우와,
     바로 갱신되네, 갱신되는 페이지도 현재 페이지고. 이거 뭐야?

탱 : live reload라는 기능인데, 완전 좋아.
이거 이용하면 수정사항도 바로 확인 가능하고, 첫 페이지로 가는게 아니라 현재페이지에서 갱신이 되지.

석 : 이야,,, 짱인데. 내부 동작은 어떻게 되는지 알고 있어?

탱 : 응. 보니깐, ~~~~~~~~~~. 근데, 사용하다보니깐 버그가 있더라구.
</body> 앞에 livereload.js 스크립트를 입력해 놓더라구. 
그래서, 만약에 html에 </body> 같은 코드가 중간에 삽입되어 있으면 오동작을 하게 되지.

석 : 아, 이런건 사소한 버근데 테스트를 안해본 부분 같네. 
google 개발자면서 이런 테스트도 안하고 commit 한다는게 상상이 안가는걸.

===================
little language (coffeescript, less, sass)
===================
  - 탱 : 근데 코드 짜는걸 보니까...좀더 편하게 코딩할 수 있는 방법이 있을 것 같은데..
          javascript 도 뭔가 내 손가락을 보호해줄 그 무언가가 없나??? java 의 스칼라 처럼 말이야...

  - 경 : 있지... coffeescript ,  그리고 less, sass 도 있고....

  - 탱 : ㅋㅋ 사실 나도 알고 있었어.. 한번 알고 있나 물어본거임!.. 사용은 해봤어?

  - 경 : 그럼.. 간단히 보여줄수 있지..
         -> coffee 같은 경우 사람이 읽기 편하고, 익숙해지면 코딩도 편한 내용 강조.
         -> css 의 경우 중복된 내용을 정의하는 부분. 디렉토리 구조화하여서 작성 가능한 부분.
             변수화로 이용가능한 부분을 강조.

       -- 경석 시연 - 
           -> 1. coffeescript 
                   - 원래 js 코드, 그리고 대비되는 coffeescript 코드 
                   --> 컴파일하여 js 떨어지는걸 보여줌.
           -> 2. less
                   - 원래 css 코드, 그리고 대비되는 less 코드 
                   --> 컴파일하여 css 떨어지는걸 보여줌.
           -> 3. sass
                   - 원래 css 코드, 그리고 대비되는 less 코드 
                   --> 컴파일하여 css 떨어지는걸 보여줌.

  - 경 : 막상 하나씩 하고 나니.. 코드가 줄어들고, css 을 구조적으로 만들수 있지만.
          - 각자 막 컴파일을 돌리고 해야하니 불편해...
          - 하나의 명령어로 다 컴파일 가능하게 하는 방법 같은거 없나??

=====================
resource optimization (YUI compressor, closure-compiler, html-minifier, jpegtran, optipng)
=====================
탱 : 이런 기능을 제공하는 yeoman이라는 툴이 있어. yeoman은 단순히 little language만 compile 해주는게 아냐. 
음,,, 웹앱이나 웹 사이트는 네트워크 반응속도가 중요하자나. 
그럴려면 html이나 js, css, img 같은 리소스의사이즈를 최소화시키는 것이 중요하겠지. 
웹앱 사이즈가 작아지면 에뮬레이터로 테스트할 때 전송 사이즈가 작아지니깐 런치속도도 빨라지겠고. 
이런 리소스들을 최적화시켜주는 라이브러리들이 존재해. 
몇가지 살펴보자. yui compressor, closure-compiler, html-minifier, jpegtran, optipng)

      이런 리소스를 최적화해주는 기능까지 포함되어 있지. 예를들어,,, 니가 만드는거 한번 돌려보자.
      (원본리소스의 크기를 보여준다) 원본은 7.7MB고, 최적화 시키면,,, 
(최적화된 크기를 보여준다) 최적화 된건 7.2MB네~ 500kb 정도 줄었네. 
결과가 어떻게 나오냐면. 
(js, css, html 파일 내용이 어떻게 줄었는지 보여준다. 그리고, minify되지 않는 파일들에 대해서도 설명한다.)

--> ? 세밀하게 옵션 조절이 가능한가?
--> ? 디폴드로 동작하는 compressor 는?
--> ? 사용자가 원하는 compressor 설정이 가능한가?

경 : 오.!!! 명령어도 하나로... yeoman 편리하구먼!!!

탱 : 근데, 좀 개선해야할 사항들이 보이는게, build를 할 때마다 전체를 다시 빌드하더라구. 
내 생각에는 수정되지 않은 소스들은 재빌드할 필요가 없다고 생각을 하거든.

경 : 흠, 그러네. 필요한 부분만 재빌드하도록 해서 빌드시간을 단축시켜주면 개발자도 시간을 절약할 수 있겠네.

===================
unittest (phantomjs, mocha, testem)
===================
탱 : yeoman에서는 또 다른 기능들도 제공하는데, 
unittest를 쉽게 할 수 있도록 mocha를 제공해 주고있어.
      (주구장창 설명)

석 : 흠,,, 근데 이것보다는 더 괜찮은 framework들이 있는 거 같어.
      난 qunit 하고 jasmine 정도 사용하는데...
      평소에는 아래처럼 테스트를 하게 되지....
    --> 경석 시연 - qunit 기본 테스트 / html / test.js / 실제 logic 이 있는 js 
                       - test.html 을 browser 로 수동으로 열어서 테스트...

  - 손 : 중요한건 알지만.. 작업하는걸 보니.. 귀찮아 보여.

  - 경 : 맞아.. 이게 그냥 일반적인 방법인데.. 불편해.. 
          1. test.html (test 을 start up 하는..) 도 필요하고, 
             테스트하고 싶은 브라우저에서 직접 사용자가 해당 파일을 열어야해...
          2. TDD 라고는 하지만.. 노가다야..

  - 경 : 나름 ? 편한듯 하면서도 불편해... 그래서 내가 좀 찾아봤는데 말이지..testem이라는 것이 있더라구.
    --> 경석 시연 - testem 을 이용해서 테트스.
                        - testem 에 등록된 browser 가 자동으로 launch 됨.
                        - 그자리에서 test 코드와 logic 코드를 짜고 결과가 실시간으로 보임.

  - 경 : 완전 편하지? 게다가. 다른 test fw 도 지원이 되..
    --> 경석 시연 - jasmine 

  - 경 : TDD 에 auto browser launch 에 .. 추가적으로.. ci 기능까지 있어.
    --> 경석 시연 - testem 의 ci 기능.

  - 경 : 이걸 이용하면 굳이 browser 을 눈으로 띄워보지 않고도 로직부분을 여러 브라우저에서 테스트가 가능하지..
         추가적으로 이런기능을 jenkins 나 hudson 와 연계시켜서.. 내가 코드를 올리면 바로 테스트 코드가 돌아가게 
         하는거야. 어떄? 

  - 손 : 정말 편리하면서도 꼭 필요한 기능으로 보인다..!!! 
         unittest 면에선 yeoman보다는 testem을 사용하는 것이 낫겠네.

===================
lint (jshint, csslint)
===================
탱 : unittest 얘기가 나와서 생각난건데, js, css에 대한 static code analysis 기능을 제공하는 library들도 있어.
	시연. (기존에 jslint와 csslint를 사용하는 것을 보여준다.)
	근데 이 기능은 yeoman에선 제공을 안해주더라.

석 : 이걸 TDD 처럼.. 실시간으로 코딩하면서 바로바로 보여주면 좋을꺼 같아.. 가이드 해주고..

====================
마무리
====================
석 : 또 다른 기능은 없어?

탱 : 지금까지 제공되는 기능은 다 보여준 것 같고, 윈도우는 아직 제공되지 않더라구. 앞으로 더 개선해 나갈꺼 같어.

석 : 흠,, 아직은 개발 단계에 있는 프로젝트인가 보네.

탱 : 응. 그래서, 더 좋은 기능을 우리 tizen에 적용하면 많은 개발자들이 tizen을 사용하지 않을까 생각하면서 구상 중인 것이 있어. 그건 10분 쉬고 설명해 줄께.


================================
wpt 띄워서 web-boss 설명한다.
================================
* h5bp, yeoman과 비교 설명
** cli user, java user를 섭렵하고, tizen의 기능을 튼튼하게.
* java로 만들어서, ide에서도 활용할 수 있게 한다.
* 패키징 과정없이, 에뮬레이터나 폰에서 수정사항을 바로 확인 할 수 있게끔 지원(에러내용도 바로 표시)
* ide상에서도 web build optimization 기능을 할 수 있게 제공
** little language compile, lint, optimize, liview